#!/usr/bin/lua

local util = require 'gluon.util'

local uci = require('luci.model.uci').cursor()

local function cmd(_command)
  local f = io.popen(_command)
  local l = f:read("*a")
  f:close()
  return l
end

local function fix_radio(radio, index, config)
  local hwmode = uci:get('wireless', radio, 'hwmode')
  local channel = tonumber(uci:get('wireless', radio, 'channel'))
  local htmode = 'HT20'
  local is_ac

  if type(config.require_mode) == 'string' then
    uci:set('wireless', radio, 'require_mode', config.require_mode)
  end

  if type(config.htmode) == 'string' then
    htmode = config.htmode
  end

  if type(config.distance) == 'number' then
    uci:set('wireless', radio, 'distance', config.distance)
  end

  if config.purge_txpower then
    uci:set('wireless', radio, 'txpower', '20')
  end
  if type(config.tx_power) == 'number' then
    uci:set('wireless', radio, 'txpower', config.tx_power)
  end

  if type(config.country) == 'string' then
    --- set country option
    uci:set('wireless', radio, 'country', config.country)
    --- don't tell the clients the country setting
    uci:set('wireless', radio, 'country_ie', '0')
  end

  --- band 2.4 GHz
  if hwmode == '11g' then

    --- get rid of 802.11b rates
    uci:set('wireless', radio, 'supported_rates', '6000 9000 12000 18000 24000 36000 48000 54000')
    uci:set('wireless', radio, 'basic_rate', '6000 9000 18000 36000 54000')

  --- band 5 GHz
  elseif hwmode == '11a' then
    is_ac = cmd('iwinfo ' .. radio .. ' info | grep -o 802.11nac') == '802.11nac'

    --- disable mesh / ibss for ac devices (if configured)
    if is_ac then
      if type(config.ac_htmode) then
        htmode = config.ac_htmode
      end

      if type(config.mesh) == 'table' and config.mesh.ac_disabled then
        uci:set('wireless', 'mesh_' .. radio, 'disabled', '1')
      end

      if type(config.ibss) == 'table' and config.ibss.ac_disabled then
          uci:set('wireless', 'ibss_' .. radio, 'disabled', '1')
      end
    end
  end

  uci:set('wireless', radio, 'htmode', htmode)

  if config.htmode_noscan then
    uci:set('wireless', radio, 'noscan', '1')
  else
    uci:delete('wireless', radio, 'noscan')
  end
end

util.iterate_radios(fix_radio)

uci:save('wireless')
uci:commit('wireless')
